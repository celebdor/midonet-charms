#
# Copyright (c) 2015 Midokura SARL, All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#!/usr/bin/python
import re
import os
import sys
import setup
import shutil
import socket
import subprocess

from charmhelpers.core import hookenv
from charmhelpers.core import host

# method which creates the node.pp
def node_puppet_create():
    config = hookenv.config()
    host_name = subprocess.check_output(["hostname"])
    host_name = host_name.strip()
    fd = open("node.pp","w")
    node_def = """
node %s {\n
    midonet_repository::install {"%s":\n
    }\n
    ->\n
    midonet_repository::configure {"%s":\n
        username => "%s",\n
        password => "%s",\n
        midonet_flavor => "%s",\n
        midonet_version => "%s",\n
        midonet_openstack_plugin_version => "%s",\n
        os_release => "%s"\n
    }\n
}
""" %(host_name, 
      host_name,
      host_name,
      config['username'],
      config['password'],
      config['midonet_flavor'],
      config['midonet_version'],
      config['midonet_openstack_plugin_version'],
      config['os_release'])
    fd.write("%s" %node_def)
    fd.close()



def install_midonet_repository():
    config = hookenv.config()
    zkhosts = []
    os.makedirs("/tmp/midonet", 0755)
    os.chdir("/tmp/midonet")
    host_name =  subprocess.check_output("hostname", shell=True)
    host_ip = socket.gethostbyname(host_name.strip())

    # create the node.pp for puppet apply
    node_path = node_puppet_create()
  
    # add the repositories to sources.list & midonet.list
    cmd = """
echo deb http://archive.ubuntu.com/ubuntu/ trusty main \
| sudo tee -a /etc/apt/sources.list
"""     
    subprocess.check_output(cmd, shell=True)

    cmd = """
echo deb http://security.ubuntu.com/ubuntu trusty-security main \
| sudo tee -a /etc/apt/sources.list
"""
    subprocess.check_output(cmd, shell=True)

    cmd = """
echo deb http://archive.ubuntu.com/ubuntu/ trusty universe \
| sudo tee -a /etc/apt/sources.list
"""
    subprocess.check_output(cmd, shell=True)
     
    cmd = """
echo deb http://security.ubuntu.com/ubuntu trusty-security universe \
| sudo tee -a /etc/apt/sources.list
"""
    subprocess.check_output(cmd, shell=True)

    cmd = """
echo deb http://ubuntu-cloud.archive.canonical.com/ubuntu trusty-updates/juno \
main | sudo tee -a /etc/apt/sources.list.d/cloudarchive-juno.list
"""
    subprocess.check_output(cmd, shell=True)


    cmd = """
echo deb http://debian.datastax.com/community stable main\
| sudo tee -a /etc/apt/sources.list.d/datastax.list
"""
    subprocess.check_output(cmd, shell=True)

    cmd = """
sudo -i |\
sudo curl -L http://debian.datastax.com/debian/repo_key | \
sudo apt-key add - | exit
"""
    subprocess.check_output(cmd, shell=True)

    cmd = """
echo deb http://repo.midonet.org/midonet/v2014.11 stable main \
| sudo tee -a /etc/apt/sources.list.d/midonet.list
"""
    subprocess.check_output(cmd, shell=True)

    cmd = """
echo deb http://repo.midonet.org/openstack-juno stable main \
| sudo tee -a /etc/apt/sources.list.d/midonet.list
"""
    subprocess.check_output(cmd, shell=True)

    cmd = """
echo deb http://repo.midonet.org/misc stable main \
| sudo tee -a /etc/apt/sources.list.d/midonet.list
"""
    subprocess.check_output(cmd, shell=True)
    
    cmd = """
sudo -i | \
sudo curl -k http://repo.midonet.org/packages.midokura.key \
| sudo apt-key add - | exit
"""
    subprocess.check_output(cmd, shell=True)

    apt_update = "sudo apt-get update"
    subprocess.check_output(apt_update, shell=True)

    key_cmd = "sudo apt-get install -y ubuntu-cloud-keyring"
    subprocess.check_output(key_cmd, shell=True)
    
    # install the  puppet    
    cmd_puppet = "sudo apt-get install -y puppet"
    subprocess.check_output(cmd_puppet, shell=True)

    repo = config['midonet_puppet_modules']
    branch = config['midonet_puppet_modules_branch']
    git_cmd = "sudo git clone %s --branch %s" %(repo, branch)
    subprocess.check_output(git_cmd, shell=True)
    MODULEPATH = os.getcwd()+'/orizuru/puppet/modules'
    PUPPET_NODE_DEFINITION = os.getcwd()+'/node.pp'
    
    # execute the puppet apply 
    command = "sudo puppet apply --verbose --debug --show_diff --modulepath=%s %s" %(MODULEPATH, PUPPET_NODE_DEFINITION)
    output = subprocess.check_output(command, shell=True)

    # delete the /tmp/midonet folder
    os.chdir("/tmp")
    shutil.rmtree("midonet")

def install():
    hookenv.log('Installing midonet-repository')
    install_midonet_repository()


if __name__ == "__main__":
    install()
